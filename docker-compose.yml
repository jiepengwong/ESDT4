version: "3.8"

volumes:
  rabbitmq_data:
  # pgdata: 
  # kongadata:

services:
  # order: 
  #   image: mongo

  ####################################
  # RabbitMQ: The messaging broker   
  ####################################
  rabbitmq:
    image: rabbitmq:3-management
    hostname: esd-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - rabbitmq_data:/var/lib/rabbitmq

  ####################################
  # twilio_notifs: The twilio notifier
  ####################################
  twilio_notifs:
    build:
      context: ./notifications
      dockerfile: twilio_notifs.Dockerfile
    image: tinggzster/twilio_notifs:esd
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1


  ###################################
  # error: The Error microservice
  ###################################
  error:
    build:
      context: ./error
      dockerfile: error.Dockerfile
    image: tinggzster/error:esd
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
      dbURI: mongodb+srv://tingz:C1e3RbVUrvmAkDzl@wtesd.azs8r.mongodb.net/ESDnotifs?retryWrites=true&w=majority

  ###################################
  #item microservice: The Item microservice
  ###################################

  item:
    build:
      context: ./item
      dockerfile: item.Dockerfile
    image: tinggzster/item:esd
    restart: always
    environment:
      dbURI: mongodb+srv://esdt4:esdt4@nodejstutoriallearning.xssjk.mongodb.net/itemdb?retryWrites=true&w=majority
    ports:
      - "5000:5000"

  ###################################
  #profile microservice: The Item microservice
  ###################################

  profile:
    build:
      context: ./profile
      dockerfile: profile.Dockerfile
    image: tinggzster/profile:esd
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://root@localhost:3306/profile
      PYTHONUNBUFFERED: 1
    ports:
      - "5001:5001"

  ###################################
  #Accept Offer: The Accept Offer complex microservice
  ###################################

  accept_offer:
    build:
      context: ./complex
      dockerfile: accept_offer.Dockerfile
    image: tinggzster/accept_offer:esd
    restart: always
    depends_on:
      - rabbitmq
      - item
      - error
      - twilio_notifs 
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
      item_URL: http://item:5001/item
      profile_URL: http://profile:5000/profile
    ports:
      - "5300:5300"

  ###################################
  #Create Listing: The Create Listing complex microservice
  ###################################
  create_listing:
    build:
      context: ./complex
      dockerfile: create_listing.Dockerfile
    image: tinggzster/create_listing:esd
    restart: always
    depends_on:
      - rabbitmq
      - item
      - error
      - twilio_notifs 
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
      item_URL: http://item:5001/item
      profile_URL: http://profile:5000/profile
    ports:
      - "5100:5100" 


  ###################################
  #Make Offer: The Make Offer complex microservice
  ###################################

  make_offer: 
    build:
      context: ./complex
      dockerfile: make_offer.Dockerfile
    image: tinggzster/make_offer:esd
    restart: always
    depends_on:
      - rabbitmq
      - twilio_notifs
      - error
      - item
      - profile
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
      item_URL: http://item:5001/item
      profile_URL: http://profile:5000/profile
    ports:
      - "5200:5200" 


  ###################################
  #leave_rating: The leave rating complex microservice
  ###################################

  leave_rating:
    build:
      context: ./complex
      dockerfile: leave_rating.Dockerfile
    image: tinggzster/leave_rating:esd
    restart: always
    depends_on:
      - rabbitmq
      - error
      - profile
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
      profile_URL: http://profile:5000/profile
    ports:
      - "5500:5500" 

  ###################################
  #Reject Offer: The Reject Offer complex microservice
  ###################################

  reject_offer:
    build:
      context: ./complex
      dockerfile: reject_offer.Dockerfile
    image: tinggzster/reject_offer:esd
    restart: always
    depends_on:
      - rabbitmq
      - error
      - twilio_notifs
      - profile
      - item
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
      item_URL: http://item:5001/item
      profile_URL: http://profile:5000/profile
    ports:
      - "5400:5400"

  ###################################
  #Remove Offer: The RemoveOffer complex microservice
  ################################### 

  remove_offer:
    build:
      context: ./complex
      dockerfile: remove_offer.Dockerfile
    image: tinggzster/remove_offer:esd
    restart: always
    depends_on:
      - rabbitmq
      - error
      - twilio_notifs
      - profile
      - item
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
      item_URL: http://item:5001/item
      profile_URL: http://profile:5000/profile
    ports:
      - "5600:5600"


  #######################################
  # Postgres: The database used by Kong
  #######################################
  # kong-database:
  #   image: postgres:9.6
  #   restart: always
  #   networks:
  #     - kong-net
  #   environment:
  #     POSTGRES_DB: kong
  #     POSTGRES_USER: kong
  #     POSTGRES_PASSWORD: password
  #   ports:
  #     - "5432:5432"
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "kong"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  # kong-migration:
  #   image: kong:2.0.4
  #   command: "kong migrations bootstrap"
  #   restart: on-failure
  #   networks:
  #     - kong-net
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_HOST: kong-database
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: password
  #   depends_on:
  #     - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  # kong:
  #   image: kong:2.0.4
  #   restart: always
  #   networks:
  #     - kong-net
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_HOST: kong-database
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: password
  #     KONG_PROXY_LISTEN: 0.0.0.0:8000
  #     KONG_ADMIN_LISTEN: 0.0.0.0:8001
  #   depends_on:
  #     - kong-migration
  #   ports:
  #     - "8000:8000"
  
  #######################################
  # Konga: Kong GUI
  #######################################
  # konga:
  #   image: pantsel/konga
  #   restart: always
  #   networks:
  #       - kong-net
  #   environment:
  #     DB_ADAPTER: postgres
  #     DB_HOST: kong-database
  #     DB_USER: kong
  #     DB_PASSWORD: password
  #     DB_DATABASE: konga_db
  #   depends_on:
  #     - kong
  #   ports:
  #     - "1337:1337"
  #   volumes:
  #     - kongadata:/app/kongadata




  

